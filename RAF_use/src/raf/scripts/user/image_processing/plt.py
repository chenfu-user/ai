#coding = utf-8
from dis import dis
import json
from re import S, T
import re
import rospy 
import math
import numpy as np
import cv2
import os


from geometry_msgs.msg import Twist
from sensor_msgs.msg import Image
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from tf_transformations import euler_from_quaternion



dlist = []

bflag = 0
flag = 0
res = {'x': [1.9220238709766873, 1.9220231103821952, 1.922022365306556, 1.9220216221153372, 1.92202086276488, 1.9220201233179224, 1.9220193857050323, 1.9220186143685722, 1.9220178805164128, 1.9220171484936532, 1.922016405079832, 1.9220156767843932, 1.922014950307469, 1.922014208128669, 1.9220134853488002, 1.9220127643298228, 1.9220120100339202, 1.9220112925916017, 1.92201057690201, 1.9220098502155774, 1.922009138053473, 1.9220084276250835, 1.9220077018936905, 1.9220069950071328, 1.9220062898580481, 1.9220055518838268, 1.9220048502455265, 1.922004150264808, 1.9220034397496146, 1.9220027432850444, 1.9220020485360871, 1.9220013389284303, 1.9220006477032174, 1.9219999580460847, 1.921999235740274, 1.921998549106388, 1.9219978640586928, 1.9219971687461226, 1.9219964868693176, 1.9219958065496234, 1.9219951116006202, 1.9219944344082212, 1.9219937587763194, 1.9219930510428425, 1.9219923785432758, 1.9219917075766821, 1.9219910267744957, 1.921990358909071, 1.9219896925610869, 1.9219890119332135, 1.9219883486158293, 1.9219876867144026, 1.9219869931149063, 1.9219863343408252, 1.9219584093985813, 1.9218596910685894, 1.9217742075972655, 1.921683754950503, 1.9216312519436318, 1.9216450342115055, 1.9216643589470033, 1.9216758180780427, 1.9217369501288524, 1.9217797425356702, 1.9218397129656875, 1.9219255967766096, 1.9219827185541831, 1.9219539732382853, 1.9218865735329862, 1.9217968958922569, 1.9217757782738083, 1.9217151626442373, 1.9216237968550336, 1.9214682311556481, 1.9212534545541529, 1.9210999164390858, 1.9208448037312187, 1.92053371836365, 1.9201619662621956, 1.9196925629141857, 1.9191015990129807, 1.9183450558167714, 1.9173195041008804, 1.9160626812296593, 1.9144591747134703, 1.9123717194792023, 1.90992946153584, 1.9070893476820434, 1.903771697274049, 1.9001179038116185, 1.8960987093476813, 1.8917295868876076, 1.8871173405750439, 1.8819205686072065, 1.8761628002938344, 1.870220473669631, 1.8639954356956123, 1.857112007312277, 1.8500619281849449, 1.842646473248693, 1.8346215469317215, 1.826485627319211, 1.8179875220576067, 1.808816970302512, 1.7996083023466314, 1.790118250627459, 1.7801321033275348, 1.7702894341237227, 1.7599851533562993, 1.7488282693342, 1.7377303951273388, 1.7263982552626376, 1.7144867991192327, 1.702540588166972, 1.6903323722917232, 1.6774746627143284, 1.6647475768911337, 1.6517331272186115, 1.6379829135913242, 1.624465042074214, 1.6107859413645067, 1.5965690399879262, 1.5826937713977065, 1.5685696003201441, 1.5536045083975414, 1.5388419559174864, 1.524018430345591, 1.5086409480085017, 1.4934875276444288, 1.478186773616011, 1.4623252004969713, 1.446810930324301, 1.4311499947152182, 1.4147527511911397, 1.3987314381379408, 1.3827708479732579, 1.3663229757480262, 1.3504104452893313, 1.334367992367658, 1.3176955334716838, 1.301388719037563, 1.2850232653378386, 1.2682330114307305, 1.2518716802971734, 1.2355701238770211, 1.2187261614644924, 1.2023684430390753, 1.186079328784752, 1.169356876308376, 1.1531684229525379, 1.1370548571111434, 1.1205341636487853, 1.1045609129735812, 1.0886604637394681, 1.0724279357745543, 1.056768032655738, 1.0411820935114127, 1.0253095058390325, 1.010021521994332, 0.9948602353973723, 0.9794248657514902, 0.9646280404688086, 0.9499839402478228, 0.9350236729897158, 0.9206753654343873, 0.9066207857211755, 0.8923911628414718, 0.878791607744119, 0.8654304092507737, 0.8519345294814236, 0.8390956343880731, 0.8265227688630078, 0.8138216790295936, 0.8017797683839881, 0.7900137364369483, 0.7781289545256979, 0.7669063665024322, 0.755952629601888, 0.7448485304527412, 0.7343228505259083, 0.7242823880754659, 0.714317344051859, 0.7049675382437284, 0.6959501354658731, 0.6870191945599794, 0.6786879194024423, 0.6706950361123056, 0.6628958477180285, 0.6556920669855937, 0.6488752528520999, 0.6421972734161766, 0.6361007664232428, 0.6304103234791617, 0.6248923927841921, 0.6197232282048182, 0.6150012352299918, 0.6106859363368009, 0.6068864930345379, 0.603446398790481, 0.6003652059143121, 0.5977848739690458, 0.5955935185386996, 0.5937353354114174, 0.5923274149640219, 0.5911845255496173, 0.5905247880106378, 0.5902334890640899, 0.5904440081635287, 0.591070208687202, 0.591940228498609, 0.5931749176407236, 0.5950483579583449, 0.5972804057916502, 0.5998747121705401, 0.6029109645353593, 0.6062994677602089, 0.6100767381679879, 0.614348060450111, 0.6188526519666375, 0.6236653676966932, 0.6291320934730463, 0.6348578708636642, 0.6409292978384692, 0.6476088146069006, 0.6543758379277236, 0.6614076709709712, 0.6690587655715866, 0.6769914530999147, 0.685287704913936, 0.6941839618438798, 0.7031596109442932, 0.7125378980655336, 0.722479098276102, 0.7324061354112748, 0.7425204925244171, 0.753297997756613, 0.7643083077381332, 0.7755757924272887, 0.7874307307103694, 0.7991818680856826, 0.8111637521812138, 0.8238019554097578, 0.8363787639096357, 0.8492398701913277, 0.8627647956238301, 0.8761073155283944, 0.889787149473618, 0.9040544128357096, 0.9180599059708942, 0.9322511093019232, 0.9469650177130634, 0.9615592844349924, 0.9764320823803213, 0.99188205218959, 1.006954322512662, 1.0221479298987823, 1.0380395184438782, 1.0535743514463967, 1.069226088491258, 1.0854392156560961, 1.1012915366522356, 1.1173023294340407, 1.133879125299669, 1.1499707790051457, 1.1661379507841199, 1.1828284097759456, 1.1990190883149798, 1.215329940525229, 1.2321981426832784, 1.2486071056743338, 1.26488513403042, 1.2817327915425294, 1.2980880997636315, 1.3143839664363517, 1.33110326422539, 1.3472304953427559, 1.3633007576571696, 1.3798488966984352, 1.3958546100912608, 1.411812586898414, 1.4281281119519853, 1.4438672993826183, 1.4594166855316457, 1.4752893759870023, 1.4906169947892658, 1.5057998823878471, 1.5213415728744875, 1.5362201134955247, 1.5509314490011372, 1.5658839517763532, 1.5801428412831366, 1.5941670439436901, 1.608450168486543, 1.6221356792645787, 1.6356222308486077, 1.6492355043225118, 1.6622496388019634, 1.675005097446965, 1.68776720749509, 1.6998722323993989, 1.711732047588171, 1.7236536244976741, 1.7349312689651053, 1.7459367068517115, 1.7569761041464365, 1.7673787194938242, 1.7774953220616583, 1.7874804713566148, 1.7968899237068061, 1.8060914266992707, 1.8151662756926814, 1.8236276142841386, 1.8317512705122219, 1.839677044864381, 1.8469868940451228, 1.8539352065230421, 1.8607156992466212, 1.866910672104462, 1.872753274008153, 1.878394218965298, 1.883503828629491, 1.8883289729585473, 1.8928859308840131, 1.8967709949934497, 1.900328193410856, 1.903610232378768, 1.9064308146097093], 'y': [-0.8343751940423257, -0.834377356335976, -0.8343793539875323, -0.8343813461821528, -0.8343833937792584, -0.8343853751243991, -0.834387351203964, -0.8343892826375087, -0.834391248165539, -0.834393208562566, -0.8343953215215829, -0.8343972716822181, -0.8343992168891871, -0.834401216527991, -0.8344031518705385, -0.8344050825188009, -0.8344069675611686, -0.8344088887212933, -0.8344108052408026, -0.8344128736179149, -0.8344147808455722, -0.834416683544131, -0.8344186398698041, -0.8344205334769115, -0.8344224226198192, -0.8344242649803703, -0.8344261450028012, -0.8344280205702136, -0.8344300469679741, -0.8344319135061924, -0.8344337755837186, -0.8344356900684503, -0.8344375431617677, -0.8344393919036817, -0.8344411926931377, -0.8344430329864353, -0.8344448691540678, -0.8344468554913994, -0.834448683375251, -0.8344505071488065, -0.834452382604938, -0.8344541980820366, -0.8344560094770682, -0.8344577719494605, -0.8344595750628131, -0.8344613741214041, -0.8344633223698341, -0.834465113218486, -0.8344669000354354, -0.8344687374685875, -0.8344705161073438, -0.8344722907211752, -0.8344740152646052, -0.8344757817646526, -0.8344419150995581, -0.8342831546057722, -0.8339656365922241, -0.8333447927152816, -0.8323054353127514, -0.8307140365551964, -0.8283574100464801, -0.8250851192027165, -0.8209605268199773, -0.8159208823263094, -0.8098410235422593, -0.8034164117097315, -0.796693731453209, -0.7893227016332256, -0.7816266126723169, -0.7731716470534987, -0.7637466818022574, -0.7540385196664142, -0.7436227832687569, -0.7320356063972004, -0.7200475987735592, -0.707753558985284, -0.6948991534857181, -0.6818576700902204, -0.6682489569493111, -0.6536390635217442, -0.6390531756697363, -0.624404353264433, -0.6091055405752301, -0.5938728569781972, -0.5781695806536034, -0.5615701507043315, -0.5455114395300754, -0.5294422849571477, -0.5128927504913489, -0.49696509784469173, -0.48112770836323143, -0.46487727217839825, -0.4492430143051269, -0.43375340961443054, -0.4179083406271375, -0.40264630835265375, -0.38757296866347946, -0.37219425475965046, -0.3574885517124708, -0.34298715176132355, -0.3282321681437727, -0.3141198294091236, -0.30013435183864295, -0.2859305456751934, -0.27245037017563883, -0.25925739570962, -0.24582529655202232, -0.2328972094232627, -0.22026132145794036, -0.20760419353288728, -0.1956204409918501, -0.18390646591838586, -0.17218660592746082, -0.1610414243998687, -0.15017769736668465, -0.13936689394405452, -0.12918640528046263, -0.11928911748705943, -0.10939287021224145, -0.1001546823019724, -0.09130911268178274, -0.08257805365679936, -0.07431142100006458, -0.06630013484853474, -0.05854195403197078, -0.05139313311083648, -0.044629669824202585, -0.03804267747560986, -0.03201477752528944, -0.026360028227147718, -0.02091804460562713, -0.01602473319654407, -0.011483116732491572, -0.00722421101656362, -0.0034854603268603254, -0.00017915203024505334, 0.0028188998888667967, 0.005369263303927367, 0.007625787232939146, 0.009463869466983346, 0.010793781609757589, 0.011757227424238995, 0.012352864754063463, 0.012501494353122448, 0.012232168320190334, 0.011558382075414516, 0.010473035865939938, 0.009064320250336152, 0.007191561519880351, 0.004911869997980153, 0.002235886534125396, -0.0009418635093694344, -0.004299929753302538, -0.007990983074768428, -0.01226962733595408, -0.016905002964100337, -0.021929934206684838, -0.02747786582387097, -0.03326601224247609, -0.03943478275410469, -0.046172068001345275, -0.053088986172761546, -0.06027807070895777, -0.06786427128300675, -0.07579059432296151, -0.08416996306293131, -0.09313433213019992, -0.10219323612315351, -0.11156871996762582, -0.1215468508296545, -0.1315383253909605, -0.14185132473493905, -0.15281420836596063, -0.16375302571099962, -0.1749861946292493, -0.18689337398843459, -0.1987227124759178, -0.21084373641014398, -0.22346216920368464, -0.2359674735749702, -0.24888480294730794, -0.26241363223507397, -0.27579362370464305, -0.2893983829137021, -0.3036191679550723, -0.3176386571406777, -0.33184489752569557, -0.34670238313310303, -0.3612944755185264, -0.37604175616207397, -0.3914598045908639, -0.40657928819033035, -0.4217280008571172, -0.43734998915236495, -0.45260554210163445, -0.4682480208525902, -0.48452907490949043, -0.5004269949351153, -0.5163714850845523, -0.5328606381519331, -0.5489544131176968, -0.5650948654652809, -0.5818206946987929, -0.5980763889913915, -0.6144098522629879, -0.6312519382909009, -0.6476274012542339, -0.6638996676712985, -0.6805449606298424, -0.6966534219565946, -0.712843729431204, -0.7295903899296763, -0.7458572241515313, -0.7619724002516145, -0.7784597294369839, -0.7944072239973707, -0.8102687587023076, -0.8264785633699593, -0.8420955284300671, -0.8576416168533709, -0.8736075460806568, -0.8889668324201889, -0.9041305083934048, -0.9196251820251685, -0.9344431858649018, -0.9490801086067571, -0.9639396229873458, -0.9781636272768549, -0.9921961198031483, -1.0064502089836502, -1.0201857407073096, -1.0336159562799354, -1.0471208438395452, -1.0600008085412784, -1.0726903106435777, -1.0855675515387841, -1.0977478120602686, -1.109607301840768, -1.1214830710456707, -1.132724952493619, -1.1436481588392187, -1.154595388409937, -1.1648733921109247, -1.1748516192765845, -1.1848145711469649, -1.194214852281308, -1.20328950748082, -1.2122162253975894, -1.220523387579746, -1.228585692235312, -1.2366752349287902, -1.2440427728515984, -1.250932843951834, -1.2576557920967883, -1.2638863517895216, -1.2697373790613316, -1.2753434313885212, -1.280331991485104, -1.2849355742995177, -1.2892680493248485, -1.2930961476517644, -1.2965717763166174, -1.2997036626430731, -1.302309297456435, -1.304546519710683, -1.3066140509001505, -1.308253892035995, -1.309278626373699, -1.3099296393400484, -1.3102305342275002, -1.310240581570501, -1.3097832279729158, -1.308792635901874, -1.3074021074519169, -1.305557687134613, -1.3033706592988858, -1.300771883110365, -1.2976820602174761, -1.2942964062453515, -1.2905144977008813, -1.2862535081964521, -1.281901306293325, -1.2770694558791396, -1.2715732136943, -1.2658550137824136, -1.2598982180297142, -1.2534101415060923, -1.2466176751402482, -1.2393820629058256, -1.2315855851881845, -1.2236772416636816, -1.215432207227682, -1.2065564205090211, -1.1975703726302827, -1.1882713955770725, -1.178326301389195, -1.1684534359653316, -1.1583620440074465, -1.1475016319108535, -1.1366257515879645, -1.1254279733667043, -1.1135871354802722, -1.101812823513712, -1.089749610649545, -1.0770427012307497, -1.064486432130001, -1.0517329002506939, -1.0383158026407144, -1.0249959884815474, -1.0113968055544678, -0.9971824605004035, -0.9831870543485178, -0.9690479260387397, -0.9542695874896979, -0.9397293625441963, -0.9249973412549274, -0.9096409324432667, -0.8945801004981964, -0.8793453801016488, -0.8634726517381627, -0.8479311429729043, -0.8323428329811872, -0.8162000918084402, -0.8004252941419815, -0.7844859994633798, -0.7678938112392509, -0.7517927497613285]}


def dist(x,y):
    return math.sqrt(x**2+y**2)

class PID():
    def __init__(self):
        self.kp = 3.8
        self.ki = 0.0
        self.kd = 0.6
        self.now = 0
        self.last = 0
        self.incont = 0
        self.dcont = 0

    def con(self,yaw,theta):
        f = theta - yaw
        leng = math.sin(f)
        print('leng:',leng)
        self.last = self.now
        self.now = leng
        self.incont += self.now
        if self.incont > 10:
            self.incont = 10
        elif self.incont < -10:
            self.incont = -10
        self.dcont   = self.now - self.last
        return self.now*self.kp + self.dcont*self.kd + self.incont*self.ki
        

class Trace:
    def __init__(self):
        self.x = 0
        self.y = 0
        self.img = 0
        self.high_speed = 0.50
        self.low_speed = 0.50
        self.speed_flag = 0
        self.img_flag = 0

        self.aflag = 0
        self.labelflag = 0

        self.check = 0
        self.img_label = 0
        self.xl =[]
        self.yl =[]

        self.vel = Twist()
        self.vel.linear.x = self.high_speed
        self.pid = PID()
        self.yaw = 0
        rospy.Subscriber('/odom',Odometry,self.odom_sub)
        rospy.Subscriber("/camera/rgb/image_raw", Image, self.img_sub)
        rospy.Subscriber("/imu",Imu,self.imu_sub)
        self.vel_pub = rospy.Publisher("cmd_vel", Twist, queue_size=5)

    def  odom_sub(self,data):
        self.x = data.pose.pose.position.x
        self.y = data.pose.pose.position.y
        dist_list = list(dist(self.x - res['x'][i], self.y - res['y'][i]) for i in range(len(res['x'])))
        print('dist',dist_list[0])
        if dist_list[0]<0.3 and self.aflag == 0:
            self.aflag = 1
        if self.aflag == 1:
            self.control()

        self.xl.append(self.x)
        self.yl.append(self.y)
        if len(self.xl) > 1000 and dist(self.xl[0]-self.xl[-1],self.yl[0]-self.yl[-1])<0.5:
            d = {'x':self.xl,'y':self.yl}
            print(d)
            os.system('rosnode kill -a')



    def imu_sub(self,data):
        x = data.orientation.x
        y = data.orientation.y
        z = data.orientation.z
        w = data.orientation.w
        [row,pitch,yaw] = euler_from_quaternion([x,y,z,w])
        self.yaw = yaw



    def img_sub(self,data):
        self.img = np.frombuffer(data.data, dtype=np.uint8).reshape(data.height, data.width, -1)
        img_gray = cv2.cvtColor(self.img, cv2.COLOR_RGB2GRAY)
        _, dst = cv2.threshold(img_gray, 230, 255, cv2.THRESH_BINARY_INV)
        if self.aflag != 1:
            left = 960
            right = 960
            while dst[1000][left] == 255:
                left -= 10
                if left < 0:
                    left = 0
                    break
            while dst[1000][right] == 255:
                right += 10
                if right > 1919:
                    right = 1919
                    break
            mid = (right+left+1)/2
            if 950 < mid < 970:
                angular_z = 0
            else:
                angular_z = (mid - 960)/960 * (-3)
            print(angular_z)
            self.vel.angular.z = angular_z
            self.vel_pub.publish(self.vel)
            

        
        
        
    


    def control(self):
        global bflag,flag
        dist_list = list(dist(self.x - res['x'][i], self.y - res['y'][i]) for i in range(len(res['x'])))
        #print(dist_list)
        length = len(dist_list)
        #print('len',length)
        
        min = dist_list[0]
        for i in range(bflag,bflag+25):
            # if i in dlist:
            #     continue

            if min>dist_list[i]:
                min = dist_list[i]
                flag = i

        print('flag:',flag)
        print('trace:',res['x'][flag],res['y'][flag])
        bflag = flag
        if length - bflag < 25:
            flag = length -1
            self.aflag = 2
        flag += 15
        if flag > length:
            flag = length-1

        theta = math.atan2(res['y'][flag]-self.y , res['x'][flag]-self.x)
        self.vel.angular.z = self.pid.con(self.yaw, theta)

        print('speed:',self.vel.linear.x)        

        self.vel_pub.publish(self.vel)


if __name__=='__main__':
    rospy.init_node('trace_node')
    trace = Trace()

    while not rospy.is_shutdown():
        rospy.spin()
